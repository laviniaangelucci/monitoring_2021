# R_code_complete_telerilevamento geoecologico 2020/2021

# SUMMARY 
# 1. R code remote sensing summary 
# 2. R code time series 
# 3. R code copernicus 
# 4. R code knitR 
# 5. R code multivariat analysis
# 6. R code classification 
# 7. R code ggplot2 
# 8. R code vegetation index
# 9. R code land cover 
# 10. R code variability 
# 11. R code spectral signatures
#------------------------------------------------------

# R_code_remote_sensing
# 1. remote sensing summary first code

# il mio primo codice per il telerilevamento 

install.packages("raster") # codice per installazione pacchetti aggiuntivi raster 
library(raster) # funzione library per richiamare il pacchetto raster 
setwd("C:/lab/") # indicare la cartella da cui estrarre i dati 

# funzione brick per importare il file su R e p224r63_2011 <- è il nuovo nome che diamo al nuovo oggetto caricato
p224r63_2011 <- brick("p224r63_2011_masked.grd")

# funzione per avere le info sul file 
p224r63_2011

# funzione plot immagini per visualizzare le varie bande con nome precedentemente assegna attraverso funzione brick
plot(p224r63_2011)

# per sviluppare palette cromatiche sotto forma di vettore (C) e livelli (100) con funzione colorrampalette
cl <- colorRampPalette(c("black","grey","light grey")) (100)

### DAY 2

# per plottare immagine con colore selezionato dalla nostra legenda personale
plot(p224r63_2011, col=cl)

# per cambiare colori aggiungine altri al punto 22
cl <- colorRampPalette(c("black","blue","green","pink","yellow","violet")) (100)

### DAY 3

library(raster) # carico pacchetto di dati raster in R
setwd("C:/lab/") # seleziono la cartella nel mio sistema operativo da cui il software recupera i dati (cartella lab in :C)

# localizzo i dati e carico immagini su R con funzione brick per importare il file su R e p224r63_2011 <- è il nome che diamo al nuovo oggetto caricato
p224r63_2011 <- brick("p224r63_2011_masked.grd")

# utilizziamo la colorrapmpalette
cls <- colorRampPalette(c("red","pink","orange","purple")) (200)

# visualizzo l'immagine con funzione plot
plot(p224r63_2011, col=cls)

# interroghiamo l'immagine p224r63_2011 per vedere tutte le bande di Landsat che la compongono 

# B1 banda del blu 
# B2 banda del verde
# B3 banda del rosso
# B4 infrarosso vicino 
# B5 infrarosso medio
# B6 infrarosso termico 
# B7 infrarosso medio

# per eliminare la grafica precedente
dev.off()

# plot banda 1 con colorramppalette, con il $ intendiamo funzione unione in questo caso uniamo l'immagine alla banda B1 (utilizza la funzione di partenza plot(p224r63_2011, col=cl))  
plot(p224r63_2011$B1_sre, col=cls)

# funzione PAR per banda B1 e B2 con funzione mfrow visualizzi #1=RIGHE #2=COLONNE. Serve a visualizzare le immagini una accanto all’altra nel software
# serve per fare un settaggio dei parametri grafici per creare una certa grafica che ci interessa.
# Per esempio se voglio creare 2 schede grafiche una accanto all’altra (tipo voglio visualizzare una grafica per la banda del BLU B1 attraverso plot(p224r63_2011$B1_sre, col=cls) e una del verde attraverso B2  plot(p224r63_2011$B2_sre) In R non posso se non con la funzione PAR
par(mfrow=c(1,2))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)

# funzione par mfrow con #2=RIGHE #1=COLONNE
par(mfrow=c(2,1))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)

# plottiamo 4 bande su R attraverso funzione par mfrow #4=RIGHE e 1=COLONNA
par(mfrow=c(4,1))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)
plot(p224r63_2011$B3_sre)
plot(p224r63_2011$B4_sre)

# a quadrat of bands
par(mfrow=c(2,2))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)
plot(p224r63_2011$B3_sre)
plot(p224r63_2011$B4_sre)

# color ramp palette del blu per B1
par(mfrow=c(2,2))
clb <- colorRampPalette(c("dark blue","blue","light blue")) (100)
plot(p224r63_2011$B1_sre, col=clb)

# color ramp palette del blu per B2
clg <- colorRampPalette(c("dark green","green","light green")) (100)
plot(p224r63_2011$B2_sre, col=clg)

# color ramp palette del rosso per B3
clr <- colorRampPalette(c("dark red","red","pink")) (100)
plot(p224r63_2011$B3_sre, col=clr)
     
# color ramp palette dell'infrarosso per B4 
clnir <- colorRampPalette(c("red","orange","yellow")) (100)
plot(p224r63_2011$B4_sre, col=clnir)

#### DAY 4 
# visualizing data by RGB plotting

library(raster) #import raster
setwd("C:/lab/") # working directory

p224r63_2011 <- brick("p224r63_2011_masked.grd")

# B1 banda del blu 
# B2 banda del verde
# B3 banda del rosso
# B4 infrarosso vicino 
# B5 infrarosso medio
# B6 infrarosso termico 
# B7 infrarosso medio

# linear stretch --> il range della rif. è da 0 a 1, ammettiamo che i valori della mia banda vadano però da 0.4 a 0.6, con lo stretch riesci a massimizzare la riflettanza per ottimizzare il colore potrai quindi andare a portare la banda a valori da 0 a 1. 
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")

# per visualizzare le bande RGB con stretch lineare
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=2, b=4, stretch="Lin")

# Exercise: mount a 2x2 multiframe (mf) inseriamo il numero di colonne e righe attraverso cui divdiamo l’immagine 
par(mfrow=c(2,2)) 
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=2, b=4, stretch="Lin")

# il mio primo pdf con R 
pdf("il_mio_primo_pdf_con_R.pdf")
par(mfrow=c(2,2))
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=2, b=4, stretch="Lin")
dev.off()

# histogram stretch permette di “tirare” ancora di più le bande di colore per massimizzare maggiormente la riflettanza 
# visualizzo bene per esempio le zone umide e quelle in cui c’è presenza di acqua, si utilizza spesso per visualizzare come si muovono incendi. 
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="hist")

# par natural colours, flase colours, and false colours with histogram stretching
par(mfrow=c(3,1))
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="hist")

### DAY5 
library(raster) #import raster
setwd("C:/lab/") # working directory

# Multitemporal set 
p224r63_2011 <- brick("p224r63_2011_masked.grd")

# cambio data utilizzando sempre la funzione brick 
p224r63_1988
p224r63_1988 <- brick("p224r63_1988_masked.grd")

# per plottare le bande RGB con stretch lin 
plot(p224r63_1988)
plotRGB(p224r63_1988, r=3, g=2, b=1, stretch="Lin") 
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")

# creiamo una matrice delle immagini con funzione PAR
par(mfrow=c(2,1))
plotRGB(p224r63_1988, r=3, g=2, b=1, stretch="Lin") 
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")

# facciamo stretch lineare e hist 
par(mfrow=c(2,2))
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="hist")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="hist")

# -------------------------------------------------------

# R_code_time_series 
# 2. R code time series second code

# time series analysis 
# greenland increase of temperature 
# data and code from Emanuela Cosma 

# installiamo i pacchetti file e inseriamoli con library in R 
install.packages("raster")
library(raster)
setwd("C:/lab/greenland")

# usiamo la funzione "raster" per creare un pacchetto di layer in immagini raster attraverso il caricamento di singoli dati. 
# La funzione RASTER è tipo BRICK infatti “usciamo” da R con le virgolette e portiamo dentro R i file che ci interessano attraverso la funzione raster. 
lst_2000 <- raster("lst_2000.tif")
lst_2005 <- raster("lst_2005.tif")
lst_2010 <- raster("lst_2010.tif")
lst_2015 <- raster("lst_2015.tif")
plot(lst_2005)
plot(lst_2000)
plot(lst_2010)
plot(lst_2015)

# funzione PAR per plottare matrice di immagini **guarda riga 83**
par(mfrow=c(2,2))
plot(lst_2000)
plot(lst_2005)
plot(lst_2010)
plot(lst_2015)

# using LIST and PATTERN functions per fare una lista di files raster 
rlist <- list.files(pattern="lst")

# LAPPLY function using list e plottiamo l'immagine mi permette di applicare una deterinata funzione 
# nel nostro caso applichiamo list.files a una lista intera di file raggruppandoli automaticamente in un singolo pacchetto di file
# quindi abbiamo usato rLIST per accoppiare diversi file e PATTERN con il nome comune dei miei file “ist”. 
# Risulta sicuramente una funzione molto più compatta e diretta

import <- lapply(rlist,raster)

# attraverso funzione stack importamo la lista precedentemente elaborata con lapply e la nominiamo TGr
TGr <- stack(import)
plot(TGr)

# DAY 2 

library(rasterVis)  
library(raster)  # per caricare in R immagini raster 
setwd("C:/lab/greenland") # working directory
install.packages("rgdal")# plottiamo una singola immagine attraverso il pacchetto "rgdal"

# codice per importare immagini con funzione lapply
rlist <- list.files(pattern="lst")
rlist
import <- lapply(rlist,raster)
import
TGr <- stack(import)
TGr

# funzione level plot serve per plottare immagini tutte insieme
# la differenza tra levelplot e plot è di tipo ESTETICO con il levelplot sfrutta una gamma di colori più ampia e le immagini sono più definite
# visualizziamo inoltre i livelli di contorno
# Si può usare per esempio per visualizzare l’innalzamento della temperatura **guarda groenlandia**

# funzione level plot
levelplot(TGr)
levelplot(TGr$lst_2000)

# usiamo la colorramppalette per riplottare l'immagine
cl <- colorRampPalette(c("blue","light blue","pink","red"))(100)
levelplot(TGr, col.regions=cl)

# utiliziamo la funzione names.attr e la funzione main  
levelplot(TGr,col.regions=cl, names.attr=c("July 2000","July 2005", "July 2010", "July 2015"))
levelplot(TGr,col.regions=cl, main="LST variation in time",
names.attr=c("July 2000","July 2005", "July 2010", "July 2015"))

# utiliziamo i dati MELT ricavati attraverso il satellite a microwave
meltlist <- list.files(pattern="melt")
melt_import <- lapply(meltlist,raster)
melt <- stack(melt_import)
melt

# facciamo il levelplot del meltlist 
levelplot(melt)

# sottraiamo il primo dato al secondo associando un nome "melttime"
# per sottrarre due dati tra loro associando un nome comune i file devono essere legati attraverso $ per legare i file nuovi al nostro file interno 
# lo utilizzo per visualizzare differenze temporali in questo caso dal 1979 al 2007
melt_amount <- melt$X2007annual_melt - melt$X1979annual_melt

# plottiamo attraverso colorramppalette 
clb <- colorRampPalette(c("blue","white","red"))(100)
plot(melt_amount, col=clb)

# facciamo un levelplot dell'argomento (melt_amount) 
levelplot(melt_amount, col.regions=clb)

#-------------------------------------------------------

# R_code_copernicus
# 3. R code dopernicus third code
# R_code_copernicus.r
# visualizing Copernicus data

library(raster)
install.packages("ncdf4") # installiamo il nuovo pacchetto in R 
library(ncdf4) # Carico il nuovo pacchetto in R 
setwd("C:/lab/") # selezioniamo la woorking directory

# carichiamo il file scaricato da Copernicus in R 
# (L'albedo di una superficie è la frazione di luce o, più in generale, di radiazione solare incidente che è riflessa in tutte le direzioni)
albedo <- raster("c_gls_SWI_202104111200_GLOBE_ASCAT_V3.1.1.nc")

# plottiamo attraverso ColorRampPalette
cl <- colorRampPalette(c('light blue','green','red','yellow'))(100)
plot(albedo, col=cl)

# ricampionamento della variabile albedo attraverso un fattore "fact" per aggregare dati del file in uscita
# la funzione aggregate(xxx, fact=n° celle) permette di unire più celle fra di loro infatti 100 equivale alle celle di pixel che "fondi assieme" 
 albedores <- aggregate(albedo, fact=100)

# plottiamo la nuova variabile albedores 
plot(albedores, col=cl)

#----------------------------------

# R_code_knit_R
# 4. R code knit R fourth code

# R_code_knitr.r

setwd("C:/lab/") # working directory
library(knitr) # library per generare lo script

# generare report partendo da script.r
stitch("R_code_time_series.r", template=system.file("misc", "knitr-template.Rnw", package="knitr"))

#-------------------------------------------------------------

 # R_code_multivariate_analysis 
 # 5. R code multivariate analysis fifth code 
 
 # R_code_multivariate_analysis.r

library(raster) # import raster
install.packages("RStoolbox") # installiamo RStoolbox 
library(RStoolbox) #calcolo indici spettrali 
setwd("C:/lab/") # working directory

# carichiamo le immagini con brick per 3 layer immagini
p224r63_2011 <- brick("p224r63_2011_masked.grd")
plot(p224r63_2011)
p224r63_2011

#plot dell'immagine 
plot(p224r63_2011$B1_sre, p224r63_2011$B2_sre, col="red", pch=19, cex=2)
plot(p224r63_2011$B2_sre, p224r63_2011$B1_sre, col="red", pch=19, cex=2)
pairs(p224r63_2011)

# aggregate cells resampling (ricampionamento) 
p224r63_2011res <- aggregate(p224r63_2011, fact=10)

# funzione par 2righe 1colonna con stretch lineare 
par(mfrow=c(2,1))
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="lin")
plotRGB(p224r63_2011res, r=4, g=3, b=2, stretch="lin")

# funzione rasterPCA per "principal component analisys"
p224r63_2011res_pca <- rasterPCA(p224r63_2011res)

# la funzione summary mostra sommario dati della mappa selezionata unita attraverso $ a model
summary(p224r63_2011res_pca$model)
dev.off()

#plot dell'immagine
plotRGB(p224r63_2011res_pca$map, r=1, g=2, b=3, stretch="lin")
 
 #-------------------------------------------------------------
 
 # R_code_classification 
 # 6. R code classification sixth code 
 
 # R_code_classification.r

# DAY 1 SOLAR ORBITER
setwd("C:/lab/") # settiamo la working directory 
library(raster) # import raster
library(RStoolbox) #calcolo indici spettrali 

# usiamo la funzione brick per importare su R i dati del pacchetto raster
so <- brick("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg")
so

# visualiziamo i tre livelli RGB dell'immagine attraverso la funzione PLOT con stretch lineare
plotRGB(so, 1, 2, 3, stretch="lin")


# "unsupervised classification" dell'immagine con n.3 classi
soc <- unsuperClass(so, nClasses=3)

# plottiamo l'immagine 
plot(soc$map)

# "unsupervised classification" mostra l'indice vegetazionale attraverso una classificazione dell'immagine con n.20 classi di colore
soc20 <- unsuperClass(so, nClasses=20)
plot(soc20$map)

# scarichiamo immagine dal programma "SolarOrbiter"
# https://www.esa.int/ESA_Multimedia/Missions/Solar_Orbiter/(result_type)/images

# portiamo l'immagine all'interno di R e plottiamo l'immagine con n.20 classi
sun <- brick("sun.png") 
sunc <- unsuperClass(sun, nClasses=20)
plot(sun.png$map)

# DAY 2 GRAND CANYON
setwd("C:/lab/") # settiamo la working directory
library(raster)
install.packages("RStoolbox") # installo RStoolbox 
library(RStoolbox)

# portiamo l'immagine del Grand Canyon all'interno di R attraverso la funzione "brick" 
gc <- brick("dolansprings_oli_2013088_canyon_lrg.jpg")

# plottiamo l'immagine attraverso funzione "RGB" con stretch lineare e stretch "hist" che presenta uno "slope" più "ripido" rispetto allo stretching lineare **guarda lezioni prec.**
plotRGB(gc, r=1, g=2, b=3, stretch="lin")
plotRGB(gc, r=1, g=2, b=3, stretch="hist")

# utiliziamo la funzione "unsuperClass" con n. 2 di classi di colore per classificare l'immagine e plottiamo successivamente
gcc2 <- unsuperClass(gc, nClasses=2)
gcc2
plot(gcc2$map)

# utiliziamo la funzione di classificazione con n.4 di classi e plottiamo succesivamente 
gcc4 <- unsuperClass(gc, nClasses=4)
plot(gcc4$map)

#--------------------------------------------------------------------------

# R_code_ggplot2 
# 7. R code ggplot 2 seventh code

library(raster)
library(RStoolbox)
library(ggplot2) # per plot con ggRGB 
library(gridExtra) # con funzione grid.arrange
setwd("~/lab/") # working directory

#usiamo la funzione brick
p224r63 <- brick("p224r63_2011_masked.grd")

# usiamo la funzione stretch lin 
ggRGB(p224r63,3,2,1, stretch="lin")
ggRGB(p224r63,4,3,2, stretch="lin")

#immagini p1 e p2 
p1 <- ggRGB(p224r63,3,2,1, stretch="lin")
p2 <- ggRGB(p224r63,4,3,2, stretch="lin")

# utilizzo le immagini p1 e p2 con funzione grid.arrange mrow2 per visualizzarle # library(gridExtra)
grid.arrange(p1, p2, nrow = 2)

#--------------------------------

# R_code_vegetetion_index
# 8. R code vegetation index eighth code

# set della workingdirectory  # carichiamo i pacchetti raster di nostro interesse
setwd("C:/lab/") 
library(raster)
library(RStoolbox)  # per calcolare indice di vegetazione
install.packages("rasterdiv")
library(rasterdiv) # per fare NDVI 

# lavoriamo con immagini della foresta amazonica di NASA portiamo all'interno di R le immagini con funzione "brick"
defor1 <- brick("defor1.jpg")
defor2 <- brick("defor2.jpg")

# plottiamo le immagini con funzione "par" per visualizzarle insieme e RGB con stretch lineare
par(mfrow=c(2,1))
plotRGB(defor1, r=1, g=2, b=3, stretch="lin")
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")

# b1 = NIR  b2 = RED  b3 = GREEN
 
# usiamo la "different vegetation index" dell'immagine 1 div1 per ottenere un immagine e visualizzare differenza dell'infrarosso e il rosso 
# NDVI è un indice "quantitativo", da informazioni circa il range di "greenness" ranging da 0-1
# NDVI= 1 -> massimo grado di "greennes" 
# NDVI =0 -> minimo grado di "greennes"
# NDVI è spesso usata per avere informazioni quantitative circa lo stato della vegetazione su larghe scale

 dvi1 <- defor1$defor1.1 - defor1$defor1.2

# plottiamo l'immagine dvi1 con la funzione "plot" 
plot(dvi1) 

#  cambiamo la colorramppalette 
cl <- colorRampPalette(c('darkblue','yellow','red','black'))(100)

# plottiamo l'immagine dvi1 con funzione "plot"
plot(dvi1, col=cl)
plot(dvi1, col=cl, main="DVI at time 1")

# usiamo la "different vegetation index" dell'immagine dvi2 e plottiamo
dvi2 <- defor2$defor2.1 - defor2$defor2.2
plot(dvi2, col=cl, main="DVI at time 2")

# analisi multitemporale usando la funzione "par" per visualizzare dvi1 e dvi2 insieme 
par(mfrow=c(2,1))
plot(dvi1, col=cl, main="DVI at time 1")
plot(dvi2, col=cl, main="DVI at time 2")

usiamo la funzione "div" per fare la sottrazione tra dvi1 e dvi2 ottentendo una differenza temporale tra le due mappe 
difdvi <- dvi1 - dvi2

# plottiamo con una nuova colorramppalette notiamo in rosso le zone più antropizzate e sottoposte a deforestazione nel tempo 
cld <- colorRampPalette(c('blue','white','red'))(100)
plot(difdvi, col=cld)

# con la funzione "Ndvi1" possiamo visualizzare immagini con funzione radiometrica diversa con range possibile da 1 a -1
# la funzione ndvi si calcola = (NIR - RED) / (NIR + RED)
ndvi1 <- (defor1$defor1.1 - defor1$defor1.2) / (defor1$defor1.1 + defor1$defor1.2)

# plottiamo con colorramppalette 
cl <- colorRampPalette(c('darkblue','yellow','red','black'))(100)
plot(ndvi1, col=cl)

# plottiamo l'immagine con la funzione "Ndvi2"
ndvi2 <- (defor2$defor2.1 - defor2$defor2.2) / (defor2$defor2.1 + defor2$defor2.2)
plot(ndvi2, col=cl)

# usiamo la funzione "spectral indices" con "vi1" e "vi2" e plottiamo con la colorramppalette "col"
# permette di calcolare tutti gli indici insieme invece che uno alla volta
vi <- spectralIndices(defor1, green = 3, red = 2, nir = 1)
vi2 <- spectralIndices(defor2, green = 3, red = 2, nir = 1)
plot(vi, col=cl)
plot(vi2, col=cl)

# plottiamo con la funzione ndvi
difndvi <- ndvi1 - ndvi2
cld <- colorRampPalette(c('blue','white','red'))(100) 
plot(difndvi, col=cld)


# DAY 3 

install.packages("rasterdiv") # pacchetto di files "rasterdiv" per la visualizzazione di worllwide NDVI  
library(rasterdiv) # per levelplot

# plottiamo il set NDVI (Normalized Difference Vegetation Index)
plot(copNDVI)

# riclassifichiamo l'immagine originale "copNDVI" in modo che valori di pixel 253:255 risultino NA (non classificati)
copNDVI <- reclassify(copNDVI, cbind(253:255, NA))

# plottiamo nuovamente l'immagine 
plot(copNDVI)
levelplot(copNDVI) # level plot
 
 #-------------------------------------------
 
 # R_code_land_cover
 # 9. R code land cover ninth code 

# R_code_land_cover.r

install.packages ("ggplot2") # installiamo il pacchetto ggplot e richiamiamo un altra libreria "ggplot"
library(ggplot2)
install.packages("gridExtra") # "GreenExtra" che permette di utilizzare ggplot per dati raster
library(gridExtra)
library(raster)
library(RStoolbox) # richiamiamo le librerie dati "raster" e "RStoolbox" per fare la classificazione 
# inseriamo la workingdirectory
setwd("C:/lab/")

# richiamiamo il dataset defort1 attraverso la funzione "brick"  
defor1 <- brick("defor1.png")

# plottiamo con la funzione RGB NIR 1 RED 2 GREEN 3
plotRGB(defor1, r=1, g=2, b=3, stretch="lin")

# carichiamo il dataset defort2 attraverso la funzione "brick"
defor2 <- brick("defor2.png")

# plottiamo con la funzione RGB NIR 1 RED 2 GREEN 3 
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")

# utiliziamo la funzione ggplot per plottare con funzione RGB a partire da 3 "rasterlayer" con stretch lineare
ggRGB(defor2, r=1, g=2, b=3, stretch="lin")

# usiamo la funzione "par" per plottare defort1 e defort2 insieme attraverso il plot con funzione "plotRGB" 
par(mfrow=c(1,2))
plotRGB(defor1, r=1, g=2, b=3, stretch="lin")
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")

# facciamo un multiframe per visualizzare defort1 e defort2 insieme attraverso la funzione "ggplot" e "grid.arrange" (mette insieme diverse sezioni all'interno del grafico in R)
p1 <- ggRGB(defor1, r=1, g=2, b=3, stretch="lin")
p2 <- ggRGB(defor2, r=1, g=2, b=3, stretch="lin")
grid.arrange(p1, p2, nrow=2)

# "unsupervised classification" **guarda cap 6**
d1c <- unsuperClass(defor1, nClasses=2)
plot(d1c$map)

# classe 1: forest
# classe 2: agriculture

#con la funzione "set.seed" il  nostro codice riproduce lo stesso set di numeri casuali
# tra () inseriamo come argomento un numero intero (arbitrario).

set.seed() 
d2c <- unsuperClass(defor2, nClasses=2)
d2c3 <- unsuperClass(defor2, nClasses=3)
plot(d2c$map)
plot(d2c3$map)
# classe 1: agriculture
# classe 2: forest

# con la funzione "freq" esaminiamo la frequenza dell'immagine precedentemente studiata con "unsuperclass"
# in questo modo assegnamo i valori numerici (grazie a funzione "freq") alle classi (in questo caso sono due [1] e [2])
freq(d1c$map)
#   value  count
# [1,]     1 306583
# [2,]     2  34709

s1 <- 306583 + 34709
prop1 <- freq(d1c$map) / s1
# prop forest: 0.8983012
# prop agriculture: 0.1016988

s2 <- 342726
prop2 <- freq(d2c$map) / s2
# prop forest: 0.5206958
# prop agriculture: 0.4793042

# costruiamo attraverso la funzione "data.frame" i dati utili per poi plottare il grafico a barre ("geom_bar")
cover <- c("Forest","Agriculture")
percent_1992 <- c(89.83, 10.16)
percent_2006 <- c(52.06, 47.93)
percentages <- data.frame(cover, percent_1992, percent_2006)
percentages

# funzione per plottare con geometria a barre
ggplot(percentages, aes(x=cover, y=percent_1992, color=cover)) + geom_bar(stat="identity", fill="white")
ggplot(percentages, aes(x=cover, y=percent_2006, color=cover)) + geom_bar(stat="identity", fill="white")

p1 <- ggplot(percentages, aes(x=cover, y=percent_1992, color=cover)) + geom_bar(stat="identity", fill="white")
p2 <- ggplot(percentages, aes(x=cover, y=percent_2006, color=cover)) + geom_bar(stat="identity", fill="white")

grid.arrange(p1, p2, nrow=1)

#-------------------------------------------

# R_code_variabiliy 
# 10. R code variability tenth code

# R_code_variability_temp.r

# settiamo la working directory e le library
library(raster)
library(RStoolbox)
setwd("C:/lab/")

# portiamo in R l'immagine "sentinel.png" attraverso la funzione brik
sent <- brick("sentinel.png")
 
# plottiamo l'immagine attraverso la funzione RGB
# NIR=1 RED=2 BLU=3 
#con r=1 b=2 g=3 e stretch="lin"
plotRGB(sent, stretch="lin")

# calcoliamo il layer NDVI (ovvero la differenza tra NIR infrared e red fratto la loro differenza)
# associamo le due bande NIR e RED alle due immagini 
nir <- sent$sentinel.1
red <- sent$sentinel.2

# costruiamo quindi la funzione NDVI e plottiamo l'immagine 
ndvi <- (nir-red) / (nir+red)
plot(ndvi)

# cambiamo la colorramppalette 
cl <- colorRampPalette(c('black','white','red','magenta','green'))(100)  
plot(ndvi,col=cl)

# calcoliamo la deviazione standard utilizzando la funzione "focal" e la funzione "window" (w=) 
ndvisd3 <- focal(ndvi, w=matrix(1/9, nrow=3, ncol=3), fun=sd)

# plottiamo l'immagine 
plot(ndvisd3)

# utilizziamo una "colorrampopalette" differente per apprezzare meglio la variazione della deviazione standard
clsd <- colorRampPalette(c('blue','green','pink','magenta','orange','brown','red','yellow'))(100) 
plot(ndvisd3, col=clsd)
 
 # facciamo la media di ndvi con 3x3 pixel utilizzando la funzione "focal"
ndvimean3 <- focal(ndvi, w=matrix(1/9, nrow=3, ncol=3), fun=mean)

# plottiamo l'immagine con la nostra colorampopalette
clsd <- colorRampPalette(c('blue','green','pink','magenta','orange','brown','red','yellow'))(100) # 
plot(ndvimean3, col=clsd)

# facciamo la media ndvi con 13x13 pixel con la funzione "focal" e plottiamo 
ndvimean13 <- focal(ndvi, w=matrix(1/269, nrow=13, ncol=13), fun=mean)
plot(ndvimean13, col=clsd)

# cambiamo la grandezza della "moving window" con deviazione standard 5x5 pixel e plottiamo
ndvimean5 <- focal(ndvi, w=matrix(1/25, nrow=5, ncol=5), fun=mean)
plot(ndvimean5, col=clsd)

# usiamo la funzione PCA per fare analisi multivariata 
sentpca <- rasterPCA(sent)

# plottiamo l'immagine 
plot(sentpca$map)

# facciamo un "summary" del modello per vedere la proporzione di variabilità spiegata da ogni singola componente
summary(sentpca$model) # la prima componente spiega il 6736804 % della variabilità totale

## DAY 2 

# settiamo la working directory e le library
library(raster)
library(RStoolbox)
setwd("C:/lab/") # working directory
library(ggplot2) # settiamo la library ggplot
library(gridExtra) # libreria per plottare ggplot insieme grid.arrange 
install.packages("viridis") # installiamo la libreria per plottare colorato con ggplot palette di viridis 
library (viridis)

# portiamo in R l'immagine "sentinel.png" attraverso la funzione brik
sent <- brick("sentinel.png")

# usiamo la funzione PCA e plottiamo l'immagine per fare l'analisi multivariata
sentpca <- rasterPCA(sent)
plot(sentpca$map)

# facciamo un "summary" del modello per vedere la proporzione di variabilità spiegata da ogni singola componente
sentpca
summary(sentpca$model)

# utilizziamo la funzione focal 3x3 per visualizzare la deviazione standard utilizzando come "oggetto" PC1
pc1 <- sentpca$map$PC1
pc1sd3 <- focal (pc1, w=matrix(1/9, nrow=3, ncol=3), fun=sd)

# utilizziamo la funzione focal 3x3 per visualizzare la deviazione standard utilizzando come "oggetto" PC1 
pc1sd5 <- focal(pc1, w=matrix(1/25, nrow=5, ncol=5), fun=sd)

# utiliziamo una color ramppalette e plottiamo l'immagine 
clsd <- colorRampPalette(c('blue','green','pink','magenta','orange','brown','red','yellow'))(100) 
plot(pc1sd3, col=clsd)

# funzione focal matrice 5x5 e colorrampopalette 
 pc1sd5 <- focal(pc1, w=matrix(1/25, nrow=5, ncol=5), fun=sd)
 clsd <- colorRampPalette(c('blue','green','pink','magenta','orange','brown','red','yellow'))(100) # 
 plot(pc1sd5, col=clsd)

# prepariamo il codice salviamolo nel server e usiamo la funzione "source" per recuperare facilmente il file su R
# prepariamo un altro codice e portiamolo in r con la funzione "source"
source("source_test_lezione.r")
source("source_ggplot.r")


# aggiungiamo a ggplot() con + a una geometria (punti, linee, poligoni, pixel raster ecc..) in questo caso usiamo la funzione geom_raster con oggetto la mappa PCA
# definiamo le "estetiche" (aes) ossia il layer che vogliamo mappare attraverso la funzione "mapping"
# le aes avrà coordinate geografiche x y e riempimento: x= x y=y riempimento = layer)
# usiamo una delle legende di viridis per dichiarare una colorappalette senza citarla nel codice
# utiliziamo "magma" come colour scale attraverso la funzione "option = magma"
ggplot() +
geom_raster(pc1sd3, mapping = aes(x = x, y = y, fill = layer)) +
scale_fill_viridis(option = "magma") +
ggtitle("Standard deviation of PC1 by magma colour scale")

# inseriamo più grafici in una pagina attraverso funzione "grid.arrange" #library "(gridExtra)"
grid.arrange(p1, p2, p3, nrow = 1)

#------------------------------------------------------------------------------------------------------------------ 
# R_code_spectral_signatures
# 11 R code spectral signatures eleventh code

# carico le library
library(raster)
library(rgdal) # import R raste o vettori
library(ggplot2) # plot di raster layers
setwd("C:/lab/") # setto woking directory

# carico immagine su R attraverso funzione "brick"
defor2 <- brick("defor2.jpg")
defor2

# defor2.1, defor2.2, defor2.3 
# NIR, red, green

# plotto immagine con tretch lineare e hist, bande 1 2 3 NIR red green
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")
plotRGB(defor2, r=1, g=2, b=3, stretch="hist")

# utilizzo la funzione "click" per identificare dei valori di un oggetto raster in un determinato punto
click(defor2, id=T, xy=T, cell=T, type="p", pch=16, cex=4, col="yellow")

# risultati:
#      x     y  cell defor2.1 defor2.2 defor2.3
# 1 178.5 435.5 30293      206        6       19
#      x     y   cell defor2.1 defor2.2 defor2.3
# 1 571.5 245.5 166916       40       99      139

# definiamo le colonne del dataset per costruire successivamente daframe e grafico con "geom line":
band <- c(1,2,3)
forest <- c(206,6,19)
water <- c(40,99,139)

# creiamo dataframe
spectrals <- data.frame(band, forest, water)

# plottiamo "sepctral signatures" con geometrie lineari per costruire il grafico
ggplot(spectrals, aes(x=band)) + geom_line(aes(y=forest), color="green") + geom_line(aes(y=water), color="blue") +
 labs(x="band",y="reflectance")
 
# ANALISI MULTITEMPORALE
##T1
#funzionne brick per importare immagine defor1 dentro R
defor1 <- brick("defor1.jpg")

#plot immagine con stretch lin bande 1 2 3 NIR red green
plotRGB(defor1, r=1, g=2, b=3, stretch="lin")

# funzione click  per identificare dei valori di un oggetto raster in un determinato punto (in questo caso defor1) 
# spectral signatures defor1
click(defor1, id=T, xy=T, cell=T, type="p", pch=16, col="yellow")

#     x     y  cell defor1.1 defor1.2 defor1.3
# 1 89.5 339.5 98622      223       11       33
#     x     y   cell defor1.1 defor1.2 defor1.3
# 1 42.5 336.5 100717      218       16       38
#     x     y  cell defor1.1 defor1.2 defor1.3
# 1 64.5 341.5 97169      213       36       46
#      x     y   cell defor1.1 defor1.2 defor1.3
# 1 80.5 326.5 107895      208        2       22
#     x     y  cell defor1.1 defor1.2 defor1.3
# 1 76.5 374.5 73619      224       21       41


##T2
# plot e funzione cick per defor2 
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")
#funzione click  per identificare dei valori di un oggetto raster in un determinato punto (in questo caso defor2) 
click(defor2, id=T, xy=T, cell=T, type="p", pch=16, col="yellow")

#      x     y  cell defor2.1 defor2.2 defor2.3
# 1 86.5 339.5 99033      197      163      151
#      x     y  cell defor2.1 defor2.2 defor2.3
# 1 104.5 338.5 99768      149      157      133
#      x     y  cell defor2.1 defor2.2 defor2.3
# 1 110.5 354.5 88302      197      132      128
#     x     y   cell defor2.1 defor2.2 defor2.3
# 1 90.5 320.5 112660      169      166      149
#    x     y   cell defor2.1 defor2.2 defor2.3
# 1 97.5 309.5 120554      150      137      129

# definisco le colonne del dataset dataset:
band <- c(1,2,3)
time1 <- c(223,11,33)
time1p2 <- c(218,16,38)
time2 <- c(197,163,151)
time2p2 <- c(149,157,133)
spectralst <- data.frame(band, time1, time2, time1p2, time2p2)


# plottiamo  sepctral signatures attraverso geometria lineare
ggplot(spectralst, aes(x=band)) + geom_line(aes(y=time1), color="red", linetype="dotted") + geom_line(aes(y=time1p2), color="red", linetype="dotted") +
geom_line(aes(y=time2), linetype="dotted") + geom_line(aes(y=time2p2), linetype="dotted") +
 labs(x="band",y="reflectance")


# porto all'interno di R l'immagine di Earth Observatory con funzione brick
eo <- brick("june_puzzler.jpg")
plotRGB(eo, 1,2,3, stretch="hist")

# funione click funzione click  per identificare dei valori di un oggetto raster in un determinato punto (in questo caso eo) 
click(eo, id=T, xy=T, cell=T, type="p", pch=16, cex=4, col="yellow")

# output
#     x     y  cell june_puzzler.1 june_puzzler.2 june_puzzler.3
# 1 93.5 373.5 76414            187            163             11
#      x     y   cell june_puzzler.1 june_puzzler.2 june_puzzler.3
# 1 219.5 285.5 139900             11            140              0
#     x     y   cell june_puzzler.1 june_puzzler.2 june_puzzler.3
# 1 184.5 315.5 118265             41             40             20


# definiamo le colonne del dataset:
band <- c(1,2,3)
stratum1 <- c(187,163,11)
stratum2 <- c(11,140,0)
stratum3 <- c(41,40,20)

spectralsg <- data.frame(band, stratum1, stratum2, stratum3)

# plottiamo sepctral signatures con geometrie lineari
ggplot(spectralsg, aes(x=band)) + geom_line(aes(y=stratum1), color="yellow") + geom_line(aes(y=stratum2), color="green") +
 geom_line(aes(y=stratum3), color="blue") +
 labs(x="band",y="reflectance")

#------------------------------------------------





