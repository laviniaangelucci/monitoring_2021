# R_code_exam_LaviniaAngelucci


#PAYPAL
#paolo.patrizio7@gmail.com


INVESTIGHIAMO UN OGGETTO PRIMA DI INIZIARE UN PROGETTO 
# PROVA NUMERO 1 --------------------------------------------------------------------
#settiamo la working directory
#library(raster)
#setwd("C:/pt/")

# usiamo la funzione brick per importare l'immagine 043 laguna di venezia in pt su :C
#laguna_13a_02g <- brick("043.jpg")

# names      : X043.1, X043.2, X043.3  queste sono le bande 
# crs        : NA NON è GEOREFERENZIATA!!!!!

#plottiamo l'immagine
#plot(laguna_13a_02g)
# si evidenzia una differenza a livello dell'acqua, potrebbe essere torbidità? lo andiamo a scoprire dopo 
# può essere che la torbidità rifletta di più in una di quelle tre bande x043.1 x043.2 x043.3

# conviene utilizzare la funzione RGB in quanto partiamo da una immagine "reale" 
# nota che in questo caso la banda near infrared non è possibile inserirla (perchè banda 4)
#plotRGB(laguna_13a_02g, r=3, g=2, b=1)
#plotrgb
#plotRGB(laguna_13a_02g)
#----------------------------------------------------------------------------------------



#settiamo la working directory sia la library raster che rgdal

library(raster)
setwd("C:/pt/")
library(rgdal)
library(gridExtra)
library(RStoolbox)
library(ggplot2)


# PROVO CON IMMAGINE GEOREFERENZIATA SU QGIS 

# chiamo lo shapefile precedentemente georeferenziato su gis (questo è lo shape file poligono del crop solo su acqua) 
# verrà applicato su immagini fg2a fg2b fg2c ovvero 20 febbraio, 11 marzo, 19 marzo 2020
readOGR("files lavinia angelucci.shp")

# rinomino lo shape file (questo è solo il poligono)
lagoon_shp <- readOGR ("files lavinia angelucci.shp")

#plotto il poligono, ossiamo il crop della laguna **guarda riga 46**
plot(lagoon_shp)

# importo l'immagine del 11 marzo fg2b georeferenziata su qgis con sistema di riferimento wags84 coordinate 4326
fg2b_mar11<- brick("fig2b_wgs84.tif")

# controllo le proprietà dell'immagine, ORA è GEOREFERENZIATA!!!!
fg2b_mar11
#class      : RasterBrick 
#Dimensions : 712, 388, 276256, 3  (nrow, ncol, ncell, nlayers)
#resolution : 1, 1  (x, y)
#extent     : 0, 388, -712, 0  (xmin, xmax, ymin, ymax)
#crs        : +proj=longlat +datum=WGS84 +no_defs 
#source     : C:/pt/fig2b_wgs84.tif 
#names      : fig2b_wgs84.1, fig2b_wgs84.2, fig2b_wgs84.3 
#min values :             0,             0,             0 
#max values :           255,           255,           255 

# faccio la stessa cosa con fig2a 20febbraio, 11marzo e 19marzo
fg2a_feb20<- brick("fig2a_wgs84.tif")
fg2a_marz11<- brick("fig2b_wgs84.tif")
fg2a_marz19<- brick("fig2c_wgs84.tif")

# ho georeferenziato tutte le immagini fg2a fg2b fg2c
# plot(nome dell'immagine,add=TRUE) plotta cose una sopra l'altra 

# plotto le immagini con RGB 
plotRGB(fg2a_feb20, r=3, g=2, b=1, stretch="Lin")
plotRGB(fg2a_marz11, r=3, g=2, b=1, stretch="Lin")
plotRGB(fg2a_marz19, r=3, g=2, b=1, stretch="Lin")

#carico le library 
library(RStoolbox)
library(ggplot2)
library(gridExtra)

# plotto con ggRGB
ggRGB(fg2a_feb20,1,3,2, stretch="lin")
ggRGB(fg2a_marz11,1,3,2, stretch="lin")
ggRGB(fg2a_marz19,1,3,2, stretch="lin")

# usiamo la funzione grid arrange per plottare inseme e poi provo con PAR
p1 <-  ggRGB(fg2a_feb20,1,3,2, stretch="lin")
p2 <-  ggRGB(fg2a_marz11,1,3,2, stretch="lin")
p3 <-  ggRGB(fg2a_marz19,1,3,2, stretch="lin")

#faccio grid.arrange
grid.arrange(p1, p2, p3, mrow=1)

lagoon_shp <- readOGR ("files lavinia angelucci.shp")

#così NON FUNZIONAA
# p1_cropped <- ggRGB(fg2a_feb20,1,3,2, stretch="lin")
#p2_cropped <-  ggRGB(fg2a_marz11,1,3,2, stretch="lin")
#p3_cropped <-  ggRGB(fg2a_marz19,1,3,2, stretch="lin")
 
# crop(p1_cropped, lagoon_shp)
# fai finta sia un'immagine normale con 3 bande ma croppata DEVI TRATTARLA COME IMMAGINE INTERA NON LA RINOMINARE --> (crop(fg2a_feb20,lagoon_shp))
plot(crop(fg2a_feb20,lagoon_shp)) FUNZIONA

# rinomino le immagini croppate
p1_cropped <- ggRGB(crop(fg2a_feb20,lagoon_shp),1,3,2, stretch="lin")
p2_cropped <- ggRGB(crop(fg2a_marz11,lagoon_shp),1,3,2, stretch="lin")
p3_cropped <- ggRGB(crop(fg2a_marz19,lagoon_shp),1,3,2, stretch="lin")

# plotto le immagini croppate
plot(p1_cropped)
plot(p2_cropped)
plot(p3_cropped)

